(ns eat-static.validations-test2
  (:require [eat-static.validations :refer :all]
            [eat-static.validations-test :as vt]
            [clojure.test :refer :all]))

;; This file tests the Eat Static core functions across namespaces

;; This file contains many of the same tests as validations-test.clj but excludes several of the actual function definitions.
;; Running the tests in this file should fail if the tests have not first run in validations-test.
;; Then, after running the other tests, running these tests should pass, indicating that all the core functions
;; are properly finding the right symbols defined in another namespace, based on the qualified aliases provided.

(deftest all-same-defaults
  (is (eval '(blend noy6 [-y] vt/y6a)))
  (is (= {:y 6} (d vt/y6a) (eval '(make vt/y6 {}))
         (eval '(d vt/noy)) (eval '(d vt/noy2)) (eval '(d vt/noy3))
         (eval '(d vt/noy4)) (eval '(d vt/noy5)) (eval '(d noy6))))
  (is (thrown? AssertionError (eval '(mc noy6 :x 3.3))))
  (is (= {:x 55 :y 6} (eval '(mc noy6 :x 55)) (eval '(make noy6 {:x 55}))))
  (is (thrown? AssertionError (eval '(mc noy6 :w 1))))
  (is (= {:w 55.1 :y 6} (eval '(mc noy6 :w 55.1)) (eval '(make noy6 {:w 55.1}))))
  (is (thrown? AssertionError (eval '(make noy6 {:w 2}))))
  (is (thrown? AssertionError (eval '(make noy6 {:x 2.1}))))
  (is (false? (eval '(c vt/req? :w 12 :y 6))))
  (is (= {:w 1.1 :y 78} (eval '(mc noy6 :w 1.1 :y 78)))))

;; removes defs of a9 a9b8 aint2 aint b8c
(deftest blended-overrides
  (is (eval '(blend anil [[a nil]] vt/a9b8)))
  (is (= {:a 9 :b 8} (eval '(d anil))))
  (is (= {:a 9 :b 8} (eval '(d vt/a9b8))))
  (is (eval '(blend aRb8 [a] vt/a9b8)))
  (is (eval '(blend anil2 [[a nil]] aRb8)))
  (is (thrown? AssertionError (eval '(d aRb8))))
  (is (thrown? AssertionError (eval '(d aRb8))))
  (is (thrown? AssertionError (eval '(make aRb8 {}))))
  (is (thrown? AssertionError (eval '(mc aRb8 :b 99))))
  (is (= {:a 44 :h 77 :b 8} (eval '(mc aRb8 :a 44 :h 77))))
  (is (eval '(blend a1b8 [[a 1]] aRb8)))
  (is (= {:a 1 :b 8} (eval '(d a1b8))))
  (is (= {:a 1 :b 8} (eval '(d vt/aint))))
  (is (= {:a 99 :b 8} (eval '(mc vt/aint :a 99))))
  (is (= {:a 123 :b 8} (eval '(mc vt/aint2 :a 123))))
  (is (eval '(blend aintd [[a -22]] vt/aint)))
  (is (= {:a -22 :b 8 :y "hi there"} (eval '(mc aintd :y "hi there"))))
  (is (not (false? (eval '(aintd? {})))))
  (is (not (false? (eval '(aintd? {:a -22})))))
  (is (not (false? (eval '(aintd? {:a 1000})))))
  (is (false? (eval '(aintd? {:a :hi}))))
  (is (false? (eval '(aintd? {:a 1.1}))))
  (is (false? (eval '(c aintd? :a :hi))))
  (is (thrown? AssertionError (eval '(d vt/aint2))))
  (is (thrown? AssertionError (eval '(mc vt/aint2 :a 123.1))))
  (is (thrown? AssertionError (eval '(mc vt/aint :a 123.1))))
  (is (eval '(blend aop [-a] aRb8)))
  (is (thrown? AssertionError (eval '(d aop))))
  (is (= {:a :hi :b 8} (eval '(mc aRb8 :a :hi))))
  (is (eval '(blend b8 [[a 9]] a1b8)))
  (is (eval '(blend b8b [-a [b 8]] vt/a9)))
  (is (= (eval '(d vt/b8c)) (eval '(d b8)) (eval '(d b8b))))
  (is (eval '(blend b7final [{b 7}] a1b8)))
  (is (= {:a 1 :b 7} (eval '(d b7final))))
  (is (eval '(blend b99 [[b 99]] b7final)))
  (is (thrown? AssertionError (eval '(d b99))))
  (is (= {:a 1 :b 7 :jj :hello} (eval '(make b99 {:b 7 :jj :hello}))))
  (is (eval '(blend nob [-b] b7final)))
  (is (= (eval '(d nob)) (eval '(d b7final))))
  (is (eval '(blend a12final [:f {a 12}] vt/a9)))
  (is (eval '(blend a12final2 [{a 13}] a12final)))
  (is (eval '(blend a12final3 [{a 12}] a12final2)))
  (is (eval '(blend a1fail [[a 1]] a12final)))
  (is (eval '(blend a2intfinal [{a 2}] vt/aint)))
  (is (eval '(blend a2intfinal2 [{a 2}] vt/aint2)))
  (is (eval '(blend ahiddenfinal [] a2intfinal2)))
  (is (eval '(blend a2intfinal2fail [{a 2.2}] vt/aint2)))
  (is (= {:a 12} (eval '(d a12final))))
  (is (= {:a 12} (eval '(make a12final {:a 12}))))
  (is (= {:a 12 :y 87} (eval '(make a12final {:a 12 :y 87}))))
  (is (= {:a 12 :y 87} (eval '(make a12final {:y 87}))))
  (is (thrown? AssertionError (eval '(make a12final {:a 11}))))
  (is (thrown? AssertionError (eval '(d a1fail))))
  (is (thrown? AssertionError (eval '(d a12final2))))
  (is (thrown? AssertionError (eval '(mc a12final2 :a 13))))
  (is (thrown? AssertionError (eval '(mc a12final2 :a 12))))
  (is (thrown? AssertionError (eval '(d a12final3))))
  (is (thrown? AssertionError (eval '(mc a12final3 :a 13))))
  (is (thrown? AssertionError (eval '(mc a12final3 :a 12))))
  (is (= {:a 12} (eval '(mc a1fail :a 12))))
  (is (= {:b 8 :a 2} (eval '(d a2intfinal))))
  (is (= {:b 8 :a 2} (eval '(d ahiddenfinal))))
  (is (thrown? AssertionError (eval '(mc ahiddenfinal :a 1))))
  (is (thrown? AssertionError (eval '(mc a2intfinal2 :a 1))))
  (is (= {:b 8 :a 2} (eval '(d a2intfinal2))))
  (is (= {:hh 88 :b 8 :a 2} (eval '(mc a2intfinal :hh 88))))
  (is (thrown? AssertionError (eval '(d a2intfinal2fail))))
  (is (thrown? AssertionError (eval '(mc a2intfinal2fail :a 2)))))
